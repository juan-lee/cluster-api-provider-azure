/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"

	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/cluster-api-provider-azure/cloud/scope"
	"sigs.k8s.io/cluster-api-provider-azure/internal/kubeadm"
	"sigs.k8s.io/cluster-api-provider-azure/internal/tunnel"
	ctrl "sigs.k8s.io/controller-runtime"
)

// azureHCPService are list of services required by cluster actuator, easy to create a fake
// TODO: Change this to use pods intsead
type azureHCPService struct {
	hcpScope      *scope.HostedControlPlaneScope
	clusterScope  *scope.ClusterScope
	kubeadmConfig *kubeadm.Configuration
}

// newAzureHCPService populates all the services based on input scope
func newAzureHCPService(hcpScope *scope.HostedControlPlaneScope, clusterScope *scope.ClusterScope) *azureHCPService {
	return &azureHCPService{
		hcpScope:      hcpScope,
		clusterScope:  clusterScope,
		kubeadmConfig: initializeKubeadmConfig(hcpScope),
	}
}

// initializeKubeadmConfig parses the kubeadm yaml generated by the bootstrap provider
func initializeKubeadmConfig(hcpScope *scope.HostedControlPlaneScope) *kubeadm.Configuration {
	config, _ := hcpScope.GetKubeAdmConfig()
	config.InitConfiguration.LocalAPIEndpoint.AdvertiseAddress = "172.17.0.10"
	config.InitConfiguration.NodeRegistration.Name = "controlplane"
	config.ClusterConfiguration.KubernetesVersion = "v1.18.0"
	config.ClusterConfiguration.Networking.ServiceSubnet = "172.18.0.0/12"
	return config
}

// Create creates HCP pod with kubeadm details
func (s *azureHCPService) Create() (*corev1.Pod, error) {
	// TODO
	return nil, nil
}

// Delete reconciles all the services in pre determined order
func (s *azureHCPService) Delete() error {
	// TODO
	return nil
}

func (r *azureHCPService) reconcileControlPlane(req ctrl.Request) (ctrl.Result, error) {
	ctx := context.Background()
	log := r.Log.WithValues("managedcontrolplane", req.NamespacedName)

	desired := r.kubeadmConfig.ControlPlanePodSpec()
	desired.Namespace = req.Namespace
	desired.Spec.Template.Spec.Containers = append(desired.Spec.Template.Spec.Containers, tunnel.ClientPodSpec().Spec.Containers...)
	existing := appsv1.Deployment{}
	if err := r.Get(ctx, types.NamespacedName{Namespace: req.Namespace, Name: desired.Name}, &existing); err != nil {
		if apierrors.IsNotFound(err) {
			log.Info("Control Plane pod not found, creating", "name", desired.Name)

			// TODO(jpang): set owner ref
			if err := r.Create(ctx, desired); err != nil {
				return ctrl.Result{}, err
			}
			return ctrl.Result{}, nil
		}
		return ctrl.Result{}, err
	}

	log.Info("Control Plane pod found, updating", "name", desired.Name)
	if err := r.Update(ctx, desired); err != nil {
		return ctrl.Result{}, err
	}
	return ctrl.Result{}, nil
}
