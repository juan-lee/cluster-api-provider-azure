/*
Copyright 2019 The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"fmt"

	"github.com/pkg/errors"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/klog"
	"sigs.k8s.io/cluster-api-provider-azure/cloud/scope"
	"sigs.k8s.io/cluster-api-provider-azure/internal/kubeadm"
	"sigs.k8s.io/cluster-api-provider-azure/internal/tunnel"
	"sigs.k8s.io/cluster-api/controllers/remote"
	"sigs.k8s.io/cluster-api/util"
	kcfg "sigs.k8s.io/cluster-api/util/kubeconfig"
)

// azureHCPService are list of services required by cluster actuator, easy to create a fake
type azureHCPService struct {
	hcpScope      *scope.HostedControlPlaneScope
	kubeadmConfig *kubeadm.Configuration
}

// newAzureHCPService populates all the services based on input scope
func newAzureHCPService(hcpScope *scope.HostedControlPlaneScope) *azureHCPService {
	return &azureHCPService{
		hcpScope:      hcpScope,
		kubeadmConfig: initializeKubeadmConfig(hcpScope),
	}
}

// initializeKubeadmConfig parses the kubeadm yaml generated by the bootstrap provider
func initializeKubeadmConfig(hcpScope *scope.HostedControlPlaneScope) *kubeadm.Configuration {
	config, err := hcpScope.GetKubeAdmConfig()
	if err != nil {
		hcpScope.Error(err, "Failed to get kubeadm config")
		return nil
	}
	config.InitConfiguration.LocalAPIEndpoint.AdvertiseAddress = "172.17.0.10"
	config.InitConfiguration.NodeRegistration.Name = "controlplane"
	if hcpScope.Cluster.Spec.ClusterNetwork != nil && hcpScope.Cluster.Spec.ClusterNetwork.Pods != nil && len(hcpScope.Cluster.Spec.ClusterNetwork.Pods.CIDRBlocks) > 0 {
		config.ClusterConfiguration.Networking.PodSubnet = hcpScope.Cluster.Spec.ClusterNetwork.Pods.CIDRBlocks[0]
	}
	if hcpScope.Cluster.Spec.ClusterNetwork != nil && hcpScope.Cluster.Spec.ClusterNetwork.Services != nil && len(hcpScope.Cluster.Spec.ClusterNetwork.Services.CIDRBlocks) > 0 {
		config.ClusterConfiguration.Networking.ServiceSubnet = hcpScope.Cluster.Spec.ClusterNetwork.Services.CIDRBlocks[0]
	}
	return config
}

// Delete reconciles all the services in pre determined order
func (s *azureHCPService) Delete() error {
	deployment := &appsv1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name: "controlplane",
			Labels: map[string]string{
				"app": "controlplane",
			},
		},
	}
	deployment.Namespace = s.hcpScope.Namespace()
	if err := s.hcpScope.Client().Delete(s.hcpScope.Context, deployment); err != nil {
		return err
	}
	return nil
}

func (s *azureHCPService) Reconcile() error {
	if s.hcpScope.AzureHostedControlPlane.Status.Ready {
		s.hcpScope.Logger.Info("ControlPlane is ready, skipping reconcile")
		return nil
	}
	if err := s.reconcileControlPlaneDeployment(); err != nil {
		return err
	}
	if err := s.reconcilePostControlPlaneInit(); err != nil {
		return err
	}
	s.hcpScope.SetReady()
	return nil
}

func (s *azureHCPService) reconcileControlPlaneDeployment() error {
	ctx := s.hcpScope.Context
	desired := s.kubeadmConfig.ControlPlaneDeploymentSpec()
	desired.Namespace = s.hcpScope.Namespace()
	desired.Spec.Template.Spec.Containers = append(desired.Spec.Template.Spec.Containers, tunnel.ClientPodSpec().Spec.Containers...)
	existing := appsv1.Deployment{}
	if err := s.hcpScope.Client().Get(ctx, types.NamespacedName{Namespace: desired.Namespace, Name: desired.Name}, &existing); err != nil {
		if apierrors.IsNotFound(err) {
			klog.Infof("Control Plane pod not found, creating: %s", desired.Name)

			// TODO(jpang): set owner ref
			if err := s.hcpScope.Client().Create(ctx, desired); err != nil {
				return fmt.Errorf("Create control plane pod failed: %w", err)
			}
			return nil
		}
		return fmt.Errorf("Get control plane pod failed: %w", err)
	}

	// klog.Info("Control Plane pod found, updating", "name", desired.Name)
	// if err := s.hcpScope.Client().Update(ctx, desired); err != nil {
	// 	return fmt.Errorf("Update control plane pod failed: %w", err)
	// }

	if existing.Status.ReadyReplicas != 1 {
		return errors.New("Control Plane Pod isn't ready")
	}
	return nil
}

func (s *azureHCPService) reconcileTunnelDeployment() error {
	ctx := s.hcpScope.Context
	remoteClient, err := remote.NewClusterClient(ctx, s.hcpScope.Client(), util.ObjectKey(s.hcpScope.Cluster), s.hcpScope.Scheme())
	if err != nil {
		return err
	}

	desired := tunnel.ClusterPodSpec()
	existing := appsv1.Deployment{}
	if err := remoteClient.Get(ctx, types.NamespacedName{Namespace: desired.Namespace, Name: desired.Name}, &existing); err != nil {
		if apierrors.IsNotFound(err) {
			klog.Infof("Tunnel deployment not found, creating: %s", desired.Name)

			// TODO(jpang): set owner ref
			if err := remoteClient.Create(ctx, desired); err != nil {
				return fmt.Errorf("Create tunnel deployment failed: %w", err)
			}
			return nil
		}
		return fmt.Errorf("Get tunnel deployment failed: %w", err)
	}
	return nil
}

func (s *azureHCPService) reconcileTunnelSecret() error {
	ctx := s.hcpScope.Context
	secret := corev1.Secret{}
	err := s.hcpScope.Client().Get(ctx, types.NamespacedName{Namespace: s.hcpScope.AzureHostedControlPlane.Namespace, Name: "tunnel-cluster"}, &secret)
	if err != nil {
		return err
	}
	remoteClient, err := remote.NewClusterClient(ctx, s.hcpScope.Client(), util.ObjectKey(s.hcpScope.Cluster), s.hcpScope.Scheme())
	if err != nil {
		return err
	}

	desired := corev1.Secret{
		ObjectMeta: metav1.ObjectMeta{
			Name:      "tunnel-client",
			Namespace: "kube-system",
		},
		Data: secret.Data,
		Type: secret.Type,
	}
	existing := corev1.Secret{}
	if err := remoteClient.Get(ctx, types.NamespacedName{Namespace: desired.Namespace, Name: desired.Name}, &existing); err != nil {
		if apierrors.IsNotFound(err) {
			klog.Infof("Tunnel secret not found, creating: %s", desired.Name)

			// TODO(jpang): set owner ref
			if err := remoteClient.Create(ctx, &desired); err != nil {
				return fmt.Errorf("Create tunnel secret failed: %w", err)
			}
			return nil
		}
		return fmt.Errorf("Get tunnel secret failed: %w", err)
	}
	return nil
}

func (s *azureHCPService) reconcilePostControlPlaneInit() error {
	ctx := s.hcpScope.Context

	kubeConfig, err := kcfg.FromSecret(ctx, s.hcpScope.Client(), util.ObjectKey(s.hcpScope.Cluster))
	if err != nil {
		return err
	}
	restConfig, err := clientcmd.RESTConfigFromKubeConfig(kubeConfig)
	if err != nil {
		return err
	}
	kubeClient, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return err
	}
	if err := kubeadm.ProvisionBootstrapToken(kubeClient, kubeConfig); err != nil {
		return fmt.Errorf("CreateBootstrapConfigMapIfNotExists: %w", err)
	}
	if err := s.kubeadmConfig.UploadConfig(kubeClient); err != nil {
		return fmt.Errorf("UploadConfig: %w", err)
	}
	if err := s.kubeadmConfig.EnsureAddons(kubeClient); err != nil {
		return fmt.Errorf("EnsureAddons: %w", err)
	}
	if err := s.reconcileTunnelSecret(); err != nil {
		return fmt.Errorf("reconcileTunnelSecret: %w", err)
	}
	if err := s.reconcileTunnelDeployment(); err != nil {
		return fmt.Errorf("reconcileTunnelDeployment: %w", err)
	}
	return nil
}
